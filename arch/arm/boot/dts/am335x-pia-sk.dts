/*
 * Copyright (C) 2015 pironex GmbH (http://www.pironex.de)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am335x-pia-pm.dtsi"

/ {
	model = "pironex piA-AM335x-SK";
	compatible = "pironex,am335x-pia-sk", "pironex,am335x-pia-pm", "ti,am33xx";

	/* cpus: defined in PM */
	/* memory: defined in PM, TODO different memory configurations */

	vcc_3v3_reg: fixedregulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "vcc_3v3_reg";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-boot-on;
		regulator-always-on;
		vin-supply = <&vcc_5v0_in>; /* turned on with vaux2, supplied by vcc_5v0 */
	};

	buttons: gpio_buttons@0 {
		compatible = "gpio-keys";
		#address-cells = <1>;
		#size-cells = <0>;

		switch@1 {
			label = "Key S1 BootMode";
			linux,code = <0x100>;
			gpios = <&gpio2 8 GPIO_ACTIVE_LOW>;
		};
	};
};

&leds {
	led@2 {
		label = "led2";
		gpios = <&gpio3 17 GPIO_ACTIVE_HIGH>;
		linux,default-trigger = "timer";
		default-state = "on";
	};

	led@3 {
		label = "led3";
		gpios = <&gpio3 18 GPIO_ACTIVE_HIGH>;
		linux,default-trigger = "mmc0";
		default-state = "off";
	};
};

&am33xx_pinmux {
	pinctrl-names = "default";
	pinctrl-0 = <&board_pins>;

	board_pins: pinmux_board_pins {
		pinctrl-single,pins = <
			0x0A8 (PIN_INPUT | MUX_MODE7)	/* SYSBOOT2/S2: lcd_data2.gpio2_8 */
			0x19C (PIN_OUTPUT | MUX_MODE7)	/* LED2: mcasp0_ahclkr.gpio3_17 */
			0x1A0 (PIN_OUTPUT | MUX_MODE7)	/* LED3: mcasp0_aclkr.gpio3_18 */
			0x17c (PIN_INPUT | MUX_MODE7)	/* GPIO0_13 */
			0x178 (PIN_INPUT | MUX_MODE7)	/* GPIO0_12 */
			0x164 (PIN_INPUT | MUX_MODE7)	/* GPIO0_7 */
			0x1b4 (PIN_INPUT | MUX_MODE7)	/* GPIO0_20 */
		>;
	};

	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 2 */
			0x040 (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gpmc_a0.gmii2_txen */
			0x044 (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_a1.mii2_rxdv */
			0x048 (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gpmc_a2.mii2_txd3 */
			0x04c (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gpmc_a3.mii2_txd2 */
			0x050 (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gpmc_a4.mii2_txd1 */
			0x054 (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gpmc_a5.mii2_txd0 */
			0x058 (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_a6.mii2_txclk */
			0x05c (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_a7.mii2_rxclk */
			0x060 (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_a8.mii2_rxd3 */
			0x064 (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_a9.mii2_rxd2 */
			0x068 (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_a10.mii2_rxd1 */
			0x06c (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_a11.mii2_rxd0 */
			0x070 (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_wait0.gmii2_crs */
			0x074 (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_wpn.gmii2_rxerr */
			0x078 (PIN_INPUT_PULLUP | MUX_MODE1)	/* gpmc_be1n.gmii2_col */
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 2 reset value */
			0x040 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x044 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x048 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x04c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x050 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x054 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x058 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x05c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x060 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x064 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x068 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x06c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x070 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x074 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x078 (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	dcan1_pins: pinmux_dcan1_pins {
		pinctrl-single,pins = <
			0x168 (PIN_OUTPUT | MUX_MODE2)	/* uart0_ctsn.dcan1_tx */
			0x16c (PIN_INPUT | MUX_MODE2)	/* uart0_rtsn.dcan1_rx */
		>;
	};

	mmc1_pins: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			0x0f0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat0.mmc0_dat0 */
			0x0f4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat1.mmc0_dat1 */
			0x0f8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat2.mmc0_dat2 */
			0x0fc (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat3.mmc0_dat3 */
			0x100 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_clk.mmc0_clk */
			0x104 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_cmd.mmc0_cmd */
			0x1A8 (PIN_INPUT | MUX_MODE7)		/* mcasp0_axr1.gpio3_20 */
		>;
	};

	spi1_pins: pinmux_spi1_pins {
		pinctrl-single,pins = <
			0x190 (PIN_INPUT_PULLUP | MUX_MODE3)	/* mcasp0_aclkx.spi1_sclk */
			0x194 (PIN_INPUT_PULLUP | MUX_MODE3)	/* mcasp0_fsx.spi1_d0 */
			0x198 (PIN_INPUT_PULLUP | MUX_MODE3)	/* mcasp_axr0.spi1_d1 */
			0x144 (PIN_INPUT_PULLUP | MUX_MODE2)	/* rmii1_refclk.spi1_cs0 */
		>;
	};
	extspi_pins: pinmux_extspi_pins {
		pinctrl-single,pins = <
		>;
	};

	uart1_pins: pinmux_uart1_pins {
		pinctrl-single,pins = <
			0x180 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart1_rxd.uart1_rxd */
			0x184 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart1_txd.uart1_txd */
		>;
	};

	uart2_pins: pinmux_uart2_pins {
		pinctrl-single,pins = <
			0x12c (PIN_INPUT_PULLUP | MUX_MODE1)	/* mii1_txclk.uart2_rxd */
			0x130 (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* mii1_rxclk.uart2_txd */
		>;
	};

	uart4_pins: pinmux_uart4_pins {
		pinctrl-single,pins = <
			0x11c (PIN_INPUT_PULLUP | MUX_MODE3)	/* mii1_txd3.uart4_rxd */
			0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE3)	/* mii1_txd2.uart4_txd */
		>;
	};

	usb0_pins: pinmux_usb0_pins {
		pinctrl-single,pins = <
			0x21c (PIN_OUTPUT | MUX_MODE0)	/* usb0_drvvbus.usb0_drvvbus */
		>;
	};

	usb1_pins: pinmux_usb1_pins {
		pinctrl-single,pins = <
			0x234 (PIN_OUTPUT | MUX_MODE0)	/* usb1_drvvbus.usb1_drvvbus */
		>;
	};
};

&dcan0 {
	status = "disabled";
};

&dcan1 {
	pinctrl-names = "default";
	pinctrl-0 = <&dcan1_pins>;
	/* TODO is there a ways to provide a -supply? */

	status = "okay";
};

&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	active_slave = <1>; /* only MII2 connected */

	status = "okay";
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;

	status = "okay";
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <0>;
	phy-mode = "mii";
};

/* uSD */
&mmc1 {
	vmmc-supply = <&vmmc_reg>;
	bus-width = <4>; /* 4 data lines */
	pinctrl-names = "default";
	pinctrl-0 = <&mmc1_pins>;
	cd-gpios = <&gpio3 20 GPIO_ACTIVE_HIGH>;

	status = "okay";
};

/* Expansion SPI1.0 */
&spi1 {
	pinctrl-names = "default";
	pinctrl-0 = <&spi1_pins>;
	ti,pindir-d0-out-d1-in;

	status = "okay";

	pinctrl-names = "default";
	princtrl-0 = <&spi1_pins>;

	extspi@1 {
		// SPI bus on external port, reuse the TRF7970a name
		// to remove the warning during boot
		compatible = "ti,trf7970araw";
		reg = <0>;
		spi-max-frequency = <2000000>; // 2 MHz

		status = "okay";
	};
};
/* Expansion UART 1 */
&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;

	status = "okay";
};
/* Expansion UART 2 */
&uart2 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart2_pins>;

	status = "okay";
};
/* Expansion UART 4 */
&uart4 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart4_pins>;

	status = "okay";
};

&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	pinctrl-names = "default";
	pinctrl-0 = <&usb0_pins>;

	status = "okay";
};

&usb1_phy {
	pinctrl-names = "default";
	pinctrl-0 = <&usb1_pins>;

	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "host";
};

&usb1 {
	status = "okay";
	dr_mode = "host";
};

&cppi41dma  {
	status = "okay";
};

&tscadc {
	status = "okay";

	/*tsc { };*/
	adc {
		ti,adc-channels = <0 1 2 3 4 5 6>;
		ti,chan-step-avg = <16>;
	};
};
